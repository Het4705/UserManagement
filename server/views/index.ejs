<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Documentation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            border-radius: 8px;
            margin-top: 20px;
        }
        h1 {
            text-align: center;
            color: #007BFF;
        }
        .endpoint {
            margin-bottom: 30px;
        }
        .endpoint h2 {
            background-color: #007BFF;
            color: #fff;
            padding: 10px;
            border-radius: 5px;
        }
        .endpoint p, .endpoint ul {
            margin: 10px 0;
        }
        .code {
            background-color: #f4f4f4;
            padding: 10px;
            border-radius: 5px;
            border-left: 5px solid #007BFF;
            font-family: monospace;
            overflow-x: auto;
        }
        .footer {
            text-align: center;
            padding: 20px;
            background-color: #007BFF;
            color: #fff;
            position: fixed;
            width: 100%;
            bottom: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>API Documentation</h1>

        <div class="endpoint">
            <h2>1. Fetch Users</h2>
            <p><strong>Endpoint:</strong> <code>/api/users</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Fetch a list of users with optional search, filter, and pagination.</p>
            <p><strong>Query Parameters:</strong></p>
            <ul>
                <li><code>firstName</code> (optional): Search by first name.</li>
                <li><code>email</code> (optional): Search by email.</li>
                <li><code>gender</code> (optional): Filter by gender.</li>
                <li><code>page</code> (optional): Page number for pagination.</li>
                <li><code>limit</code> (optional): Number of users per page.</li>
            </ul>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "docs": [ ... ],<br>
                "totalDocs": 100,<br>
                "limit": 10,<br>
                "totalPages": 10,<br>
                "page": 1,<br>
                "pagingCounter": 1,<br>
                "hasPrevPage": false,<br>
                "hasNextPage": true,<br>
                "prevPage": null,<br>
                "nextPage": 2<br>
                }
            </div>
        </div>

        <div class="endpoint">
            <h2>2. Add User</h2>
            <p><strong>Endpoint:</strong> <code>/api/users</code></p>
            <p><strong>Method:</strong> POST</p>
            <p><strong>Description:</strong> Add a new user.</p>
            <p><strong>Request Body:</strong></p>
            <div class="code">
                {<br>
                "firstName": "John",<br>
                "lastName": "Doe",<br>
                "mobile": "1234567890",<br>
                "email": "johndoe@example.com",<br>
                "gender": "Male",<br>
                "location": "New York",<br>
                "role": "user",<br>
                "status": "active",<br>
                "profilePicture": "example.jpg"<br>
                }
            </div>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "msg": "User added successfully",<br>
                "user": { ... }<br>
                }
            </div>
        </div>

        <div class="endpoint">
            <h2>3. Update User</h2>
            <p><strong>Endpoint:</strong> <code>/api/users</code></p>
            <p><strong>Method:</strong> PUT</p>
            <p><strong>Description:</strong> Update user details.</p>
            <p><strong>Query Parameters:</strong></p>
            <ul>
                <li><code>userId</code> (optional): ID of the user to update.</li>
                <li><code>emailId</code> (optional): Email of the user to update.</li>
            </ul>
            <p><strong>Request Body:</strong></p>
            <div class="code">
                {<br>
                "firstName": "John",<br>
                "lastName": "Doe",<br>
                "mobile": "1234567890",<br>
                "email": "johndoe@example.com",<br>
                "gender": "Male",<br>
                "location": "New York",<br>
                "role": "user",<br>
                "profilePicture": "example.jpg"<br>
                }
            </div>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "msg": "User updated successfully",<br>
                "user": { ... }<br>
                }
            </div>
        </div>

        <div class="endpoint">
            <h2>4. Update User Status</h2>
            <p><strong>Endpoint:</strong> <code>/api/users/status</code></p>
            <p><strong>Method:</strong> PUT</p>
            <p><strong>Description:</strong> Update user status.</p>
            <p><strong>Query Parameters:</strong></p>
            <ul>
                <li><code>userId</code> (optional): ID of the user to update.</li>
                <li><code>emailId</code> (optional): Email of the user to update.</li>
            </ul>
            <p><strong>Request Body:</strong></p>
            <div class="code">
                {<br>
                "status": "active"<br>
                }
            </div>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "msg": "User status updated successfully",<br>
                "user": { ... }<br>
                }
            </div>
        </div>

        <div class="endpoint">
            <h2>5. Delete User</h2>
            <p><strong>Endpoint:</strong> <code>/api/users</code></p>
            <p><strong>Method:</strong> DELETE</p>
            <p><strong>Description:</strong> Delete a user by their ID or email.</p>
            <p><strong>Query Parameters:</strong></p>
            <ul>
                <li><code>userId</code> (optional): ID of the user to delete.</li>
                <li><code>emailId</code> (optional): Email of the user to delete.</li>
            </ul>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "msg": "User deleted successfully"<br>
                }
            </div>
        </div>

        <div class="endpoint">
            <h2>6. Get Users Sorted by Creation Date</h2>
            <p><strong>Endpoint:</strong> <code>/api/users/sorted</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Get users sorted by creation date with pagination.</p>
            <p><strong>Query Parameters:</strong></p>
            <ul>
                <li><code>page</code> (optional): Page number for pagination (default: 1).</li>
                <li><code>limit</code> (optional): Number of users per page (default: 10).</li>
                <li><code>order</code> (optional): Sort order (asc or desc, default: asc).</li>
            </ul>
            <p><strong>Response:</strong></p>
            <div class="code">
                {<br>
                "docs": [ ... ],<br>
                "totalDocs": 100,<br>
                "limit": 10,<br>
                "totalPages": 10,<br>
                "page": 1,<br>
                "pagingCounter": 1,<br>
                "hasPrevPage": false,<br>
                "hasNextPage": true,<br>
                "prevPage":
